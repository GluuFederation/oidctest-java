

db.flows.insert(
{
  "name": "rp-id_token-iat",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "behavior": ["iat"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Rejects ID Token without 'iat' claim",
  "detailed_description": "Request an ID token and verify its '${IAT}' value.",
  "expected_result": "Identify the missing 'iat' value and reject the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);

db.flows.insert(
{
  "name": "rp-id_token-issuer-mismatch",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "behavior": ["issi"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Rejects ID Token with incorrect 'iss' claim",
  "detailed_description": "Request an ID token and verify its '${ISS}' value.",
  "expected_result": "Identify the incorrect 'iss' value and reject the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);

db.flows.insert(
{
  "name": "rp-id_token-kid-absent-multiple-jwks",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "behavior": ["nokidmuljwks"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "RS256"
    ]
  },
  "short_description": "Rejects ID Token without 'kid' claim in JOSE header if multiple JWKs supplied in 'jwks_uri'",
  "detailed_description": "Request an ID token and verify its signature using the keys provided by the Issuer.",
  "expected_result": "Identify that the 'kid' value is missing from the JOSE header and that the Issuer publishes ${MULITPLE_KEYS_JWKS} (referenced by 'jwks_uri'). The RP can do one of two things; reject the ID Token since it can not by using the kid determined which key to use to verify the signature. Or it can just test all possible keys and hit upon one that works, which it will in this case."
}
);


db.flows.insert(
{
  "name": "rp-id_token-kid-absent-single-jwks",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "behavior": ["nokid1jwks"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "RS256"
    ]
  },
  "short_description": "Accepts ID Token without 'kid' claim in JOSE header if only one matching JWK is supplied in 'jwks_uri'",
  "detailed_description": "Request an ID token and verify its signature using a single matching key provided by the Issuer.",
  "expected_result": "Use the single matching key out of the Issuer's published set to verify the ID Tokens signature and accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);


db.flows.insert(
{
  "name": "rp-id_token-missing-at_hash",
  "MTI": [
    "IT",
    "CIT"
  ],
  "behavior": ["math"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "id_token token",
      "code id_token token"
    ]
  },
  "short_description": "Rejects ID Token with incorrect 'at_hash' claim when response_type='id_token token'",
  "detailed_description": "Make an authentication request using response_type='id_token token' for Implicit Flow or response_type='code id_token token' for Hybrid Flow. Verify the 'at_hash' presence in the returned ID Token.",
  "expected_result": "Identify missing 'at_hash' value and reject the ID Token."
}
);


db.flows.insert(
{
  "name": "rp-id_token-missing-c_hash",
  "MTI": [
    "CI",
    "CIT"
  ],
  "behavior": ["mch"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code id_token",
      "code id_token token"
    ]
  },
  "short_description": "Rejects ID Token with missing 'c_hash' claim when hybrid flow is used",
  "detailed_description": "Retrieve Authorization Code and ID Token from the Authorization Endpoint, using Hybrid Flow. Verify the c_hash presence in the returned ID token.",
  "expected_result": "Identify missing 'c_hash' value and reject the ID Token."
}
);


db.flows.insert(
{
  "name": "rp-id_token-sig+enc",
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "RS256"
    ],
    "id_token_encryption_alg_values_supported": [
      "RSA1_5"
    ],
    "id_token_encryption_enc_values_supported": [
      "A128CBC-HS256"
    ]
  },
  "short_description": "Can request and use signed and encrypted ID Token",
  "detailed_description": "Request an signed and encrypted ID Token. Decrypt the returned the ID Token and verify its signature using the keys published by the Issuer.",
  "expected_result": "Accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);


db.flows.insert(
{
  "name": "rp-id_token-sig+enc-a128kw",
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "RS256"
    ],
    "id_token_encryption_alg_values_supported": [
      "A128KW"
    ],
    "id_token_encryption_enc_values_supported": [
      "A256CBC-HS512"
    ]
  },
  "short_description": "Can request and use signed and encrypted ID Token using A128kw",
  "detailed_description": "Request an signed and encrypted ID Token. Decrypt the returned the ID Token and verify its signature using the keys published by the Issuer.",
  "expected_result": "Accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);

db.flows.insert(
{
  "name": "rp-id_token-sig-es256",
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "ES256"
    ]
  },
  "short_description": "Accepts ID Token with valid asymmetric 'ES256' signature",
  "detailed_description": "Request an signed ID Token. Verify the signature on the ID Token using the keys published by the Issuer.",
  "expected_result": "Accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);

db.flows.insert(
{
  "name": "rp-id_token-sig-hs256",
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "HS256"
    ]
  },
  "short_description": "Accepts ID Token with valid symmetric 'HS256' signature",
  "detailed_description": "Accepts ID Token with valid symmetric 'HS256' signature. Verify the signature on the ID Token using the keys published by the Issuer.",
  "expected_result": "Accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);

db.flows.insert(
{
  "name": "rp-id_token-sig-none",
  "MTI": [
    "C",
    "CNF",
    "DYN"
  ],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code"
    ],
    "id_token_signing_alg_values_supported": [
      "none"
    ]
  },
  "short_description": "Can request and use unsigned ID Token",
  "detailed_description": "Use ${CODE_FLOW} and retrieve an unsigned ID Token. This test is only applicable when response_type='code'",
  "expected_result": "Accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);

db.flows.insert(
{
  "name": "rp-id_token-sig-rs256",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ],
    "id_token_signing_alg_values_supported": [
      "RS256"
    ]
  },
  "short_description": "Accepts ID Token with valid asymmetric 'RS256' signature",
  "detailed_description": "Request an signed ID Token. Verify the signature on the ID Token using the keys published by the Issuer.",
  "expected_result": "Accept the ID Token after doing ${ID_TOKEN_VALIDATION}."
}
);


db.flows.insert(
{
  "name": "rp-id_token-sub",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "behavior": ["itsub"],
  "group": "ID Token",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Rejects ID Token without 'sub' claim",
  "detailed_description": "Request an ID token and verify it contains a ${SUB} value.",
  "expected_result": "Identify the missing 'sub' value and reject the ID Token."
}
);

db.flows.insert(
{
  "name": "rp-key-rotation-op-enc-key",
  "behavior": ["rotenc"],
  "group": "Key Rotation",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Supports rotation of provider's asymmetric encryption keys",
  "detailed_description": "Fetch the issuer's keys from the 'jwks_uri' and make an ${ENCRYPTED_REQUEST} using the issuer's encryption keys. Fetch the issuer's keys from the jwks_uri again, and make a new encrypted request using the rotated encryption keys.",
  "expected_result": "A successful authentication response to both authentication requests encrypted using rotated encryption keys."
}
);

db.flows.insert(
{
  "name": "rp-key-rotation-op-sign-key",
  "MTI": ["CNF", "DYN"],
  "group": "Key Rotation",
  "behavior": ["rotsig"],
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Supports rotation of provider's asymmetric signing keys",
  "detailed_description": "Request an ID Token and verify its signature. Make a new authentication request and retrieve another ID Token and verify its signature.",
  "expected_result": "Successfully verify both ID Token signatures, fetching the ${SIGNING_KEY_ROTATION} if the 'kid' claim in the JOSE header is unknown."
}
);


db.flows.insert(
{
  "name": "rp-key-rotation-op-sign-key-native",
  "MTI": [
    "CNF",
    "DYN"
  ],
  "group": "Key Rotation",
  "behavior": ["rotsig"],
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Supports rotation of provider's asymmetric signing keys, variant for 'native' apps",
  "detailed_description": "Request an ID Token and verify its signature. Will have to retrieve new keys from the OP to be able to verify the ID Token",
  "expected_result": "Successfully verify the ID Token signature, fetching the ${SIGNING_KEY_ROTATION} if the 'kid' claim in the JOSE header is unknown."
}
);


db.flows.insert(
{
  "name": "rp-nonce-invalid",
  "MTI": [
    "C",
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "group": "nonce Request Parameter",
  "behavior": ["nonce"],
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "code",
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Rejects ID Token with invalid 'nonce' when valid 'nonce' sent",
  "detailed_description": "Pass a ${NONCE_IMPLEMENTATION} in the Authentication Request. Verify the 'nonce' value returned in the ${ID_TOKEN}.",
  "expected_result": "Identify that the 'nonce' value in the ID Token is invalid and reject the ID Token."
}
);

db.flows.insert(
{
  "name": "rp-nonce-unless-code-flow",
  "MTI": [
    "I",
    "IT",
    "CI",
    "CT",
    "CIT"
  ],
  "group": "nonce Request Parameter",
  "claims": "normal",
  "capabilities": {
    "response_types_supported": [
      "id_token",
      "id_token token",
      "code id_token",
      "code token",
      "code id_token token"
    ]
  },
  "short_description": "Sends 'nonce' unless using code flow",
  "detailed_description": "Always send a ${NONCE_IMPLEMENTATION} as a request parameter while using implicit or hybrid flow. Verify the 'nonce' value returned in the ${ID_TOKEN}.",
  "expected_result": "An ${ID_TOKEN}, either from the Authorization Endpoint or from the Token Endpoint, containing the same 'nonce' value as passed in the authentication request when using ${HYBRID_FLOW_ID_TOKEN} or ${IMPLICIT_FLOW_ID_TOKEN}."
}
);
















 

